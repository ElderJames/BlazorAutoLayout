@using System.ComponentModel.DataAnnotations.Schema
@inject StateService State;
@inherits StatefulComponentBase

@Render()

<form method="post" @onsubmit="HandleOnClick" @formname="@($"state_form_{Id}")" data-enhance>
    <AntiforgeryToken />

    @foreach(var item in events)
    {
        <button style="display:none;" type="submit" name="_currentEventName" value="@item.Key" id="@($"state_form_{Id}_{item.Key}")"></button>
    }
</form>


@code {

    // [Parameter]
    // public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> Attributes { get; set; }

    [Parameter]
    public string Tag { get; set; }

    [SupplyParameterFromForm(Name = "_currentEventName")]
    private string CurrentEventName{ get; set; }

    [NotMapped]
    private Dictionary<string, object> events = new();

    [NotMapped]
    private Dictionary<string, object> _attribute = new();

    private void HandleOnClick(EventArgs _)
    {
        if (events.TryGetValue(CurrentEventName, out var callback))
        {
            ((dynamic)callback).InvokeAsync();
        }
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        base.SetParametersAsync(parameters);
        foreach (var item in Attributes)
        {
            if (item.Key.StartsWith("on"))
            {
                events.TryAdd(item.Key, item.Value);

                var submitScript = $@"document.querySelector(""#state_form_{Id}_{item.Key}"").click()";
                _attribute[item.Key] = submitScript;
            }
            else
            {
                _attribute.TryAdd(item.Key, item.Value);
            }
        }
        return Task.CompletedTask;
    }

    private RenderFragment Render()
    {
      
        return builder =>
        {
            builder.OpenElement(0, Tag);
            builder.AddMultipleAttributes(1, _attribute);
            builder.AddContent(2, ChildContent);
            builder.CloseElement();
        };
    }
}
